name: graspologic-native CI
on: [push, pull_request]
jobs:
  materialize-build-version:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Materialize build number
        run: |
          pip install -U pip
          pip install toml
          python .github/build/manifest_version.py packages/pyo3/Cargo.toml version.txt
      - uses: actions/upload-artifact@v2
        with:
          name: cargo-toml
          path: packages/pyo3/Cargo.toml
      - uses: actions/upload-artifact@v2
        with:
          name: version-txt
          path: version.txt
  code-check-rust:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2
      - name: Check format
        run: |
          rustup toolchain install nightly --component rustfmt
          rustup default nightly
          cargo fmt -- --check
  build-rust:
    needs: ["materialize-build-version", "code-check-rust"]
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        python_version: ["3.6", "3.7", "3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{matrix.python_version}}
        uses: actions/setup-python@v2
        with:
          python-version: "${{matrix.python_version}}"
      - uses: actions/download-artifact@v2
        with:
          name: cargo-toml
          path: materialized
      - name: "Materialized Cargo Placement"
        run: |
          mv packages/pyo3/Cargo.toml Cargo.toml.old
          mv materialized/Cargo.toml packages/pyo3/Cargo.toml
      - name: Update python environment
        run: |
          pip install -U pip setuptools wheel
          pip install maturin
      - name: Rust Unittests
        run: |
          rustup default nightly
          cargo test --manifest-path packages/network_partitions/Cargo.toml
      - name: Package Python
        run: |
          cd packages/pyo3
          python ${{github.workspace}}/.github/build/homogenized_maturin_build.py ${{matrix.python_version}}
      - name: Python Unittests
        run: |
          cd packages/pyo3
          pip install ../../target/wheels/*.whl
          python -m unittest
        shell: bash
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: target/wheels/*.whl
  publish:
    runs-on: ubuntu-latest
    needs: "build-rust"
    if: (github.ref=='refs/heads/main' || github.ref=='refs/heads/dev') && needs.build-rust.result=='success'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - uses: actions/download-artifact@v2
        with:
          name: wheels
          path: dist/
      - name: Generate SHA256 files for each wheel
        run: |
          sha256sum dist/*.whl > checksums.txt
          cat checksums.txt
      - uses: actions/download-artifact@v2
        with:
          name: version-txt
          path: version/
      - name: Release Tag from Version
        run: |
          GRASPOLOGIC_VERSION=$(cat version/version.txt)
          echo "GRASPOLOGIC_VERSION=$GRASPOLOGIC_VERSION" >> $GITHUB_ENV
          echo $GRASPOLOGIC_VERSION
      - name: Is Prerelease?
        run: |
          if [[ "$GITHUB_REF" == "ref/heads/dev" ]]; then
            echo "GRASPOLOGIC_PRERELEASE=true" >> $GITHUB_ENV
          else
            echo "GRASPOLOGIC_PRERELEASE=false" >> $GITHUB_ENV
          fi
      - name: Install dependencies
        run: |
          python -m pip install -U pip setuptools wheel twine
      - name: Publish with twine
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload dist/*
      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.GRASPOLOGIC_VERSION }}
          release_name: graspologic-native-${{ env.GRASPOLOGIC_VERSION }}
          body_path: "checksums.txt"
          prerelease: ${{ env.GRASPOLOGIC_PRERELEASE }}

