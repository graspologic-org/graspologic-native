name: graspologic-native CI
on: [push, pull_request]
jobs:
  materialize-build-version:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Materialize build number
        run: |
          pip install -U pip
          pip install toml
          python .github/build/manifest_version.py packages/pyo3/Cargo.toml version.txt
          GRASPOLOGIC_VERSION=$(cat version.txt)
          echo "GRASPOLOGIC_VERSION=$GRASPOLOGIC_VERSION" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: cargo-toml
          path: packages/pyo3/Cargo.toml
  build-rust:
    needs: "materialize-build-version"
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        python_version: ["3.6", "3.7", "3.8", "3.9"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{matrix.python_version}}
        uses: actions/setup-python@v1
        with:
          python-version: ${{matrix.python_version}}
      - uses: actions/download-artifact@v2
        with:
          name: cargo-toml
          path: packages/pyo3/Cargo.toml
      - name: Update python environment
        run: |
          pip install -U pip setuptools wheel
          pip install maturin
      - name: Rust build tools
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
      - name: Run Format Check
        run: |
          cargo fmt -- --check
      - name: Test
        run: |
          cargo test
      - name: Package Python
        run: |
          cd packages/pyo3
          python .github/build/homogenized_maturin_build.py $(python_version)
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: target/wheels/*.whl
  publish:
    runs-on: ubuntu-latest
    needs: [build-rust]
    if: github.ref=='refs/heads/main' || github.ref=='refs/heads/dev'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - uses: actions/download-artifact@v2
        with:
          name: wheels
          path: dist/
      - name: Generate SHA256 files for each wheel
        run: |
          sha256sum dist/*.whl > checksums.txt
          cat checksums.txt
      - name: Is Prerelease?
        run: |
          if [[ "$GITHUB_REF" == "ref/heads/dev" ]]; then
            echo "GRASPOLOGIC_PRERELEASE=true" >> $GITHUB_ENV;
          else
            echo "GRASPOLOGIC_PRERELEASE=false" >> $GITHUB_ENV;
          fi
      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ GRASPOLOGIC_VERSION }}
          release_name: graspologic-native-testbuild-${{ GRASPOLOGIC_VERSION }}
          body_path: "checksums.txt"
          prerelease: ${{ GRASPOLOGIC_PRERELEASE }}
#      - name: Install dependencies
#        run: |
#          python -m pip install -U pip setuptools wheel twine
#      - name: Publish with twine
#        env:
#          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#        run: |
#          twine upload dist/*